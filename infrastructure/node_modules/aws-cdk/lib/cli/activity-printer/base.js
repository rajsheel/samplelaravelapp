"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivityPrinterBase = void 0;
const private_1 = require("../../../../@aws-cdk/tmp-toolkit-helpers/src/api/io/private");
const util_1 = require("../../util");
class ActivityPrinterBase {
    constructor(props) {
        this.props = props;
        /**
         * The with of the "resource type" column.
         */
        this.resourceTypeColumnWidth = (0, util_1.maxResourceTypeLength)({});
        /**
         * A list of resource IDs which are currently being processed
         */
        this.resourcesInProgress = {};
        this.rollingBack = false;
        this.failures = new Array();
        this.hookFailureMap = new Map();
        this.stream = props.stream;
    }
    /**
     * Receive a stack activity message
     */
    notify(msg) {
        switch (true) {
            case private_1.IO.CDK_TOOLKIT_I5501.is(msg):
                this.start(msg.data);
                break;
            case private_1.IO.CDK_TOOLKIT_I5502.is(msg):
                this.activity(msg.data);
                break;
            case private_1.IO.CDK_TOOLKIT_I5503.is(msg):
                this.stop();
                break;
            default:
                // ignore all other messages
                break;
        }
    }
    start({ stack }) {
        this.resourceTypeColumnWidth = (0, util_1.maxResourceTypeLength)(stack.template);
    }
    activity(activity) {
        // process the activity and then call print
        this.addActivity(activity);
        this.print();
    }
    stop() {
        // final print after the stack is done
        this.print();
    }
    addActivity(activity) {
        const status = activity.event.ResourceStatus;
        const hookStatus = activity.event.HookStatus;
        const hookType = activity.event.HookType;
        if (!status || !activity.event.LogicalResourceId) {
            return;
        }
        this.stackProgress = activity.progress;
        if (status === 'ROLLBACK_IN_PROGRESS' || status === 'UPDATE_ROLLBACK_IN_PROGRESS') {
            // Only triggered on the stack once we've started doing a rollback
            this.rollingBack = true;
        }
        if (status.endsWith('_IN_PROGRESS')) {
            this.resourcesInProgress[activity.event.LogicalResourceId] = activity;
        }
        if ((0, util_1.stackEventHasErrorMessage)(status)) {
            const isCancelled = (activity.event.ResourceStatusReason ?? '').indexOf('cancelled') > -1;
            // Cancelled is not an interesting failure reason
            if (!isCancelled) {
                this.failures.push(activity);
            }
        }
        if (status.endsWith('_COMPLETE') || status.endsWith('_FAILED')) {
            delete this.resourcesInProgress[activity.event.LogicalResourceId];
        }
        if (hookStatus !== undefined &&
            hookStatus.endsWith('_COMPLETE_FAILED') &&
            activity.event.LogicalResourceId !== undefined &&
            hookType !== undefined) {
            if (this.hookFailureMap.has(activity.event.LogicalResourceId)) {
                this.hookFailureMap.get(activity.event.LogicalResourceId)?.set(hookType, activity.event.HookStatusReason ?? '');
            }
            else {
                this.hookFailureMap.set(activity.event.LogicalResourceId, new Map());
                this.hookFailureMap.get(activity.event.LogicalResourceId)?.set(hookType, activity.event.HookStatusReason ?? '');
            }
        }
    }
    failureReason(activity) {
        const resourceStatusReason = activity.event.ResourceStatusReason ?? '';
        const logicalResourceId = activity.event.LogicalResourceId ?? '';
        const hookFailureReasonMap = this.hookFailureMap.get(logicalResourceId);
        if (hookFailureReasonMap !== undefined) {
            for (const hookType of hookFailureReasonMap.keys()) {
                if (resourceStatusReason.includes(hookType)) {
                    return resourceStatusReason + ' : ' + hookFailureReasonMap.get(hookType);
                }
            }
        }
        return resourceStatusReason;
    }
    /**
     * Is the activity a meta activity for the stack itself.
     */
    isActivityForTheStack(activity) {
        return activity.event.PhysicalResourceId === activity.event.StackId;
    }
}
exports.ActivityPrinterBase = ActivityPrinterBase;
ActivityPrinterBase.TIMESTAMP_WIDTH = 12;
ActivityPrinterBase.STATUS_WIDTH = 20;
//# sourceMappingURL=data:application/json;base64,