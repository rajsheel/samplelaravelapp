"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackActivityMonitor = void 0;
const util = require("util");
const uuid = require("uuid");
const stack_event_poller_1 = require("./stack-event-poller");
const resource_metadata_1 = require("../../../../@aws-cdk/tmp-toolkit-helpers/src/api/resource-metadata/resource-metadata");
const util_1 = require("../../util");
const stack_progress_monitor_1 = require("./stack-progress-monitor");
const private_1 = require("../../../../@aws-cdk/tmp-toolkit-helpers/src/api/io/private");
class StackActivityMonitor {
    constructor({ cfn, ioHelper, stack, stackName, resourcesTotal, changeSetCreationTime, pollingInterval = 2000, }) {
        this.errors = [];
        this.ioHelper = ioHelper;
        this.stack = stack;
        this.stackName = stackName;
        this.progressMonitor = new stack_progress_monitor_1.StackProgressMonitor(resourcesTotal);
        this.pollingInterval = pollingInterval;
        this.poller = new stack_event_poller_1.StackEventPoller(cfn, {
            stackName,
            startTime: changeSetCreationTime?.getTime() ?? Date.now(),
        });
    }
    async start() {
        this.monitorId = uuid.v4();
        await this.ioHelper.notify(private_1.IO.CDK_TOOLKIT_I5501.msg(`Deploying ${this.stackName}`, {
            deployment: this.monitorId,
            stack: this.stack,
            stackName: this.stackName,
            resourcesTotal: this.progressMonitor.total,
        }));
        this.scheduleNextTick();
        return this;
    }
    async stop() {
        const oldMonitorId = this.monitorId;
        this.monitorId = undefined;
        if (this.tickTimer) {
            clearTimeout(this.tickTimer);
        }
        // Do a final poll for all events. This is to handle the situation where DescribeStackStatus
        // already returned an error, but the monitor hasn't seen all the events yet and we'd end
        // up not printing the failure reason to users.
        await this.finalPollToEnd(oldMonitorId);
        await this.ioHelper.notify(private_1.IO.CDK_TOOLKIT_I5503.msg(`Completed ${this.stackName}`, {
            deployment: oldMonitorId,
            stack: this.stack,
            stackName: this.stackName,
            resourcesTotal: this.progressMonitor.total,
        }));
    }
    scheduleNextTick() {
        if (!this.monitorId) {
            return;
        }
        this.tickTimer = setTimeout(() => void this.tick(), this.pollingInterval);
    }
    async tick() {
        if (!this.monitorId) {
            return;
        }
        try {
            this.readPromise = this.readNewEvents(this.monitorId);
            await this.readPromise;
            this.readPromise = undefined;
            // We might have been stop()ped while the network call was in progress.
            if (!this.monitorId) {
                return;
            }
        }
        catch (e) {
            await this.ioHelper.notify(private_1.IO.CDK_TOOLKIT_E5500.msg(util.format('Error occurred while monitoring stack: %s', e), { error: e }));
        }
        this.scheduleNextTick();
    }
    findMetadataFor(logicalId) {
        const metadata = this.stack.manifest?.metadata;
        if (!logicalId || !metadata) {
            return undefined;
        }
        return (0, resource_metadata_1.resourceMetadata)(this.stack, logicalId);
    }
    /**
     * Reads all new events from the stack history
     *
     * The events are returned in reverse chronological order; we continue to the next page if we
     * see a next page and the last event in the page is new to us (and within the time window).
     * haven't seen the final event
     */
    async readNewEvents(monitorId) {
        const pollEvents = await this.poller.poll();
        for (const resourceEvent of pollEvents) {
            this.progressMonitor.process(resourceEvent.event);
            const activity = {
                deployment: monitorId,
                event: resourceEvent.event,
                metadata: this.findMetadataFor(resourceEvent.event.LogicalResourceId),
                progress: this.progressMonitor.progress,
            };
            this.checkForErrors(activity);
            await this.ioHelper.notify(private_1.IO.CDK_TOOLKIT_I5502.msg(this.formatActivity(activity, true), activity));
        }
    }
    /**
     * Perform a final poll to the end and flush out all events to the printer
     *
     * Finish any poll currently in progress, then do a final one until we've
     * reached the last page.
     */
    async finalPollToEnd(monitorId) {
        // If we were doing a poll, finish that first. It was started before
        // the moment we were sure we weren't going to get any new events anymore
        // so we need to do a new one anyway. Need to wait for this one though
        // because our state is single-threaded.
        if (this.readPromise) {
            await this.readPromise;
        }
        await this.readNewEvents(monitorId);
    }
    /**
     * Formats a stack activity into a basic string
     */
    formatActivity(activity, progress) {
        const event = activity.event;
        const metadata = activity.metadata;
        const resourceName = metadata ? metadata.constructPath : event.LogicalResourceId || '';
        const logicalId = resourceName !== event.LogicalResourceId ? `(${event.LogicalResourceId}) ` : '';
        return util.format('%s | %s%s | %s | %s | %s %s%s%s', event.StackName, progress !== false ? `${activity.progress.formatted} | ` : '', new Date(event.Timestamp).toLocaleTimeString(), event.ResourceStatus || '', event.ResourceType, resourceName, logicalId, event.ResourceStatusReason ? event.ResourceStatusReason : '', metadata?.entry.trace ? `\n\t${metadata.entry.trace.join('\n\t\\_ ')}` : '');
    }
    checkForErrors(activity) {
        if ((0, util_1.stackEventHasErrorMessage)(activity.event.ResourceStatus ?? '')) {
            const isCancelled = (activity.event.ResourceStatusReason ?? '').indexOf('cancelled') > -1;
            // Cancelled is not an interesting failure reason, nor is the stack message (stack
            // message will just say something like "stack failed to update")
            if (!isCancelled && activity.event.StackName !== activity.event.LogicalResourceId) {
                this.errors.push(activity.event.ResourceStatusReason ?? '');
            }
        }
    }
}
exports.StackActivityMonitor = StackActivityMonitor;
//# sourceMappingURL=data:application/json;base64,