name: Deploy Laravel Application

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: infrastructure/package-lock.json

      - name: Install infrastructure dependencies
        working-directory: infrastructure
        run: |
          # Remove existing package-lock.json and node_modules
          rm -rf package-lock.json node_modules
          
          # Update package.json with correct versions
          npm pkg set devDependencies.@types/node="20.17.30"
          npm pkg set devDependencies.undici-types="6.19.8"
          
          # Install dependencies and generate new package-lock.json
          npm install
          
          # Verify installation
          npm ls @types/node
          npm ls undici-types

      - name: Build infrastructure
        working-directory: infrastructure
        run: npm run build

      - name: Deploy infrastructure
        working-directory: infrastructure
        run: npm run deploy -- --require-approval never
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}

      - name: Get ECR repository URI
        id: get-ecr
        run: |
          ECR_REPO=$(aws cloudformation describe-stacks \
            --stack-name LaravelStack \
            --query 'Stacks[0].Outputs[?OutputKey==`ECRRepositoryUri`].OutputValue' \
            --output text)
          echo "ECR_REPO=$ECR_REPO" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        run: |
          docker build -t ${ECR_REPO}:latest -t ${ECR_REPO}:${{ github.sha }} -f Dockerfile.prod .
          docker push ${ECR_REPO}:latest
          docker push ${ECR_REPO}:${{ github.sha }}

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster laravel-cluster \
            --service LaravelService \
            --force-new-deployment

      - name: Get ALB DNS
        id: get-alb
        run: |
          ALB_DNS=$(aws cloudformation describe-stacks \
            --stack-name LaravelStack \
            --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
            --output text)
          echo "ALB_DNS=$ALB_DNS" >> $GITHUB_ENV

      - name: Deployment Complete
        run: |
          echo "Deployment completed successfully!"
          echo "Application is available at: ${{ env.ALB_DNS }}" 