# GitHub Actions workflow for deploying Laravel application to AWS
# This workflow builds and deploys the Laravel application to AWS using CDK

name: Deploy Laravel Application

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (optional)'
        required: false
        type: string

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_PHP: laravel-app
  ECR_REPOSITORY_NGINX: laravel-nginx
  ECS_CLUSTER: LaravelCluster
  ECS_SERVICE_PHP: LaravelPhpService
  ECS_SERVICE_NGINX: LaravelNginxService
  ECS_TASK_DEFINITION_PHP: LaravelPhpTask
  ECS_TASK_DEFINITION_NGINX: LaravelNginxTask
  CONTAINER_NAME_PHP: LaravelPhpContainer
  CONTAINER_NAME_NGINX: LaravelNginxContainer

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      timeout-minutes: 5

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
      timeout-minutes: 5

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install CDK dependencies
      working-directory: infrastructure
      run: |
        npm install
        npm install -g aws-cdk
      timeout-minutes: 5

    - name: Deploy infrastructure
      working-directory: infrastructure
      run: |
        # Bootstrap CDK (if not already done)
        cdk bootstrap

        # Deploy the stack which includes ECR repositories
        cdk deploy --require-approval never
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ env.AWS_REGION }}
      timeout-minutes: 15

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      timeout-minutes: 5

    - name: Build, tag, and push image to Amazon ECR (PHP)
      id: build-image-php
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build PHP image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_PHP:$IMAGE_TAG -f docker/php/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_PHP:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_PHP:$IMAGE_TAG"
      timeout-minutes: 10

    - name: Build, tag, and push image to Amazon ECR (Nginx)
      id: build-image-nginx
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Nginx image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG -f docker/nginx/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG"
      timeout-minutes: 10

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_PHP \
        --query taskDefinition > task-definition-php.json
        aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_NGINX \
        --query taskDefinition > task-definition-nginx.json
      timeout-minutes: 5

    - name: Fill in the new image ID in the Amazon ECS task definition (PHP)
      id: task-def-php
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition-php.json
        container-name: ${{ env.CONTAINER_NAME_PHP }}
        image: ${{ steps.build-image-php.outputs.image }}
      timeout-minutes: 5

    - name: Fill in the new image ID in the Amazon ECS task definition (Nginx)
      id: task-def-nginx
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition-nginx.json
        container-name: ${{ env.CONTAINER_NAME_NGINX }}
        image: ${{ steps.build-image-nginx.outputs.image }}
      timeout-minutes: 5

    - name: Deploy Amazon ECS task definition (PHP)
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-php.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_PHP }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
      timeout-minutes: 15

    - name: Deploy Amazon ECS task definition (Nginx)
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-nginx.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_NGINX }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
      timeout-minutes: 15

    - name: Verify deployment
      run: |
        # Wait for the service to stabilize
        sleep 30
        
        # Check if the PHP service is running
        PHP_TASKS=$(aws ecs list-tasks --cluster $ECS_CLUSTER --service-name $ECS_SERVICE_PHP --query 'taskArns[]' --output text)
        if [ -z "$PHP_TASKS" ]; then
          echo "PHP service is not running"
          exit 1
        fi
        
        # Check if the Nginx service is running
        NGINX_TASKS=$(aws ecs list-tasks --cluster $ECS_CLUSTER --service-name $ECS_SERVICE_NGINX --query 'taskArns[]' --output text)
        if [ -z "$NGINX_TASKS" ]; then
          echo "Nginx service is not running"
          exit 1
        fi
        
        echo "Deployment verified successfully"
      timeout-minutes: 10

    - name: Update ECS task definition with database credentials
      run: |
        # Get the RDS secret ARN from CloudFormation outputs
        DB_SECRET_ARN=$(aws cloudformation describe-stacks --stack-name LaravelStack --query 'Stacks[0].Outputs[?OutputKey==`DbSecretArn`].OutputValue' --output text)
        
        if [ "$DB_SECRET_ARN" != "Secret not available" ]; then
          echo "Updating PHP task definition with database credentials from $DB_SECRET_ARN"
          
          # Get the current task definition
          TASK_DEF=$(aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_PHP --query 'taskDefinition' --output json)
          
          # Update the task definition with the secret
          NEW_TASK_DEF=$(echo $TASK_DEF | jq --arg secret "$DB_SECRET_ARN" '
            .containerDefinitions[0].secrets = [
              {
                "name": "DB_USERNAME",
                "valueFrom": $secret + ":username"
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": $secret + ":password"
              },
              {
                "name": "APP_KEY",
                "valueFrom": "/${{ env.CDK_DEFAULT_ACCOUNT }}/prod/APP_KEY"
              }
            ]
          ')
          
          # Register the new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)
          
          # Update the service to use the new task definition
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE_PHP --task-definition $NEW_TASK_DEF_ARN
          
          echo "Updated PHP task definition with database credentials"
        else
          echo "RDS secret not available, skipping task definition update"
        fi
      timeout-minutes: 10 