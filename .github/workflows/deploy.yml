# GitHub Actions workflow for deploying Laravel application to AWS
# This workflow builds and deploys the Laravel application to AWS using CDK

name: Deploy Laravel Application

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (optional)'
        required: false
        type: string

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_PHP: laravel-app
  ECR_REPOSITORY_NGINX: laravel-nginx
  ECS_CLUSTER: LaravelCluster
  ECS_SERVICE_PHP: LaravelPhpService
  ECS_SERVICE_NGINX: LaravelNginxService
  ECS_TASK_DEFINITION_PHP: LaravelPhpTask
  ECS_TASK_DEFINITION_NGINX: LaravelNginxTask
  CONTAINER_NAME_PHP: LaravelPhpContainer
  CONTAINER_NAME_NGINX: LaravelNginxContainer

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      timeout-minutes: 5

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
      timeout-minutes: 5

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install CDK dependencies
      working-directory: infrastructure
      run: |
        npm install
        npm install -g aws-cdk
      timeout-minutes: 5

    - name: Deploy infrastructure
      working-directory: infrastructure
      run: |
        # Bootstrap CDK (if not already done)
        cdk bootstrap

        # Deploy the entire stack
        cdk deploy --require-approval never --context GITHUB_SHA=${{ github.sha }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ env.AWS_REGION }}
        GITHUB_SHA: ${{ github.sha }}
      timeout-minutes: 15

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      timeout-minutes: 5

    - name: Build, tag, and push image to Amazon ECR (PHP)
      id: build-image-php
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build PHP image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_PHP:$IMAGE_TAG -f docker/php/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_PHP:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_PHP:$IMAGE_TAG"
      timeout-minutes: 10

    - name: Build, tag, and push image to Amazon ECR (Nginx)
      id: build-image-nginx
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Nginx image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG -f docker/nginx/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG"
      timeout-minutes: 10

    - name: Update ECS services
      run: |
        # Update PHP service
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE_PHP --force-new-deployment
        
        # Update Nginx service
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE_NGINX --force-new-deployment
        
        # Wait for services to stabilize
        aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE_PHP $ECS_SERVICE_NGINX
      timeout-minutes: 15

    - name: Verify deployment
      run: |
        # Check if the PHP service is running
        PHP_TASKS=$(aws ecs list-tasks --cluster $ECS_CLUSTER --service-name $ECS_SERVICE_PHP --query 'taskArns[]' --output text)
        if [ -z "$PHP_TASKS" ]; then
          echo "PHP service is not running"
          exit 1
        fi
        
        # Check if the Nginx service is running
        NGINX_TASKS=$(aws ecs list-tasks --cluster $ECS_CLUSTER --service-name $ECS_SERVICE_NGINX --query 'taskArns[]' --output text)
        if [ -z "$NGINX_TASKS" ]; then
          echo "Nginx service is not running"
          exit 1
        fi
        
        echo "Deployment verified successfully"
      timeout-minutes: 10 